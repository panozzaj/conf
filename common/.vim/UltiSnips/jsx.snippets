###########
# IMPORTS #
###########

snippet ii "import" b
import $1 from '${1}'
endsnippet

snippet iir "import relative" b
import $1 from './${1}'
endsnippet

snippet ii_ "import lodash" b
import _ from 'lodash'
endsnippet


#############
# PROPTYPES #
#############

snippet rpta
$1: React.PropTypes.array,
endsnippet

snippet rptb
$1: React.PropTypes.bool,
endsnippet

snippet rptf
$1: React.PropTypes.func,
endsnippet

snippet rptn
$1: React.PropTypes.number,
endsnippet

snippet rpto
$1: React.PropTypes.object,
endsnippet

snippet rpts
$1: React.PropTypes.string,
endsnippet


##############
# COMPONENTS #
##############

snippet newcomp "new React component" b
import React from 'react'

class $1 extends React.Component {
  render() {
    return (
      <div>
        $1 component
      </div>
    )
  }
}

export default ${1}
endsnippet


###################
# STATE AND PROPS #
###################

snippet tss "this.setState" b
this.setState({ $1 })
endsnippet

snippet tssm "this.setState multi-line" b
this.setState({
  $1
})
endsnippet

snippet tsss "this.setState multi-line" b
this.setState(
  state => ({
    $1
  })
)
endsnippet

snippet ts "this.state" w
this.state
endsnippet

snippet cts "const assign this.state" b
const { $1 } = this.state
endsnippet

snippet ctsm "const assign this.state multi-line" b
const {
  $1,
} = this.state
endsnippet

snippet tp "this.props" w
this.props
endsnippet

snippet tpc "this.props.children" w
this.props
endsnippet

snippet ctp "const assign this.props" b
const { $1 } = this.props
endsnippet

snippet ctpm "const assign this.props multi-line" b
const {
  $1,
} = this.props
endsnippet


#########
# OTHER #
#########

snippet cn
className='$1'
endsnippet

snippet s=
style={{
  $1
}}
endsnippet

snippet ss=
style={{ $1 }}
endsnippet

snippet ss
style={{ $1 }}
endsnippet

snippet s=m
style={{
  $1
}}
endsnippet

snippet style=
style={{ $1 }}
endsnippet

snippet bg
backgroundColor: '$1',
endsnippet

snippet ife "if...else" b
if ($1) {
    $2
} else {
    $3
}
endsnippet

snippet clv "console.log variable" b
console.log('$1: ', ${1})
endsnippet

snippet cl "console.log" b
console.log('${1}')
endsnippet

snippet cev "console.error variable" b
console.error('$1: ', ${1:err})
endsnippet

snippet ce "console.error" b
console.error('${1}')
endsnippet


############
# PROMISES #
############

snippet then "then" i
then(($1) => {
  $2
})
endsnippet

snippet then( "then" i
then(($1) => {
  $2
})
endsnippet

snippet }).t "then" i
}).then(($1) => {
  $2
})
endsnippet

snippet })t "then" i
}).then(($1) => {
  $2
})
endsnippet

snippet catch "catch" i
catch(err => {
  $1
})
endsnippet

snippet catch( "catch" i
catch(err => {
  $1
})
endsnippet

snippet }).c "catch" i
}).catch(err => {
  $1
})
endsnippet

snippet })c "catch" i
}).catch(err => {
  $1
})
endsnippet

snippet })f "finally" i
}).finally(() => {
  $1
})
endsnippet

###########
# TESTING #
###########

snippet xit "xit" b
xit('${1:description}', () => {
  $2
})
endsnippet

snippet xdes "xdescribe" b
xdescribe('${1:description}', () => {
  $2
})
endsnippet

snippet "des(c?)" "describe (test)" r
describe('${1:description}', () => {
  $2
})
endsnippet

snippet it
it('${1:description}', () => {
  $2
})
endsnippet

snippet bef
beforeEach(() => {
  $2
})
endsnippet
