#!/bin/bash

# Generated by Gemini 2.5 on 2025-05-30

# Script to find Rails controller and view files based on a full URL.
# Assumes GET request for route recognition by default.

# --- Configuration ---
# Common view extensions to check for
declare -a VIEW_EXTENSIONS=(
    ".html.erb"
    ".html.haml"
    ".html.slim"
    ".turbo_stream.erb"
    ".turbo_stream.haml"
    ".turbo_stream.slim"
    ".js.erb"
    ".json.jbuilder"
    ".xml.builder"
    ".text.erb"
    ".erb" # Generic ERB
    ".haml" # Generic Haml
    ".slim" # Generic Slim
)
# Default HTTP method for route recognition
HTTP_METHOD="GET"

# --- Helper Functions ---
print_usage() {
  echo "Usage: $(basename "$0") <full_url>"
  echo "Example: $(basename "$0") http://localhost:3000/admin/users/123/edit"
  echo ""
  echo "This script must be run from the root of a Rails application."
}

# --- Main Script ---

# Check if URL is provided
if [ -z "$1" ]; then
  print_usage
  exit 1
fi

# Check if in Rails root (simple check)
if [ ! -f "bin/rails" ]; then
  echo "Error: This script must be run from the root of a Rails application."
  echo "       'bin/rails' not found in current directory ($(pwd))."
  exit 1
fi

FULL_URL="$1"

# Extract path from URL (scheme://host:port/path?query#fragment)
EXTRACTED_PATH=$(echo "$FULL_URL" | sed -E 's|^[^/]+//[^/]+(/[^#?]*)?.*|\1|')
URL_PATH=${EXTRACTED_PATH:-/}

echo "--------------------------------------------------"
echo "Attempting to find Rails route information for:"
echo "  URL:    $FULL_URL"
echo "  Path:   $URL_PATH"
echo "  Method: $HTTP_METHOD"
echo "--------------------------------------------------"

# Prepare the Rails runner script using a HEREDOC for clarity
RAILS_RUNNER_SCRIPT=$(cat <<RUBY_SCRIPT
begin
  path = ENV['RAILS_URL_PATH']
  http_method_str = ENV['RAILS_HTTP_METHOD']

  if path.nil? || path.empty?
    puts "Error: Internal script error - RAILS_URL_PATH environment variable received by runner is empty or nil."
    exit 1
  end

  if http_method_str.nil? || http_method_str.empty?
    puts "Error: Internal script error - RAILS_HTTP_METHOD environment variable received by runner is empty or nil."
    exit 1
  end

  http_method_sym = http_method_str.upcase.to_sym

  recognized_route_info = nil
  if defined?(ActiveSupport::Deprecation.silence)
    ActiveSupport::Deprecation.silence do
      recognized_route_info = Rails.application.routes.recognize_path(path, { method: http_method_sym })
    end
  else
    recognized_route_info = Rails.application.routes.recognize_path(path, { method: http_method_sym })
  end
  
  puts "controller:#{recognized_route_info[:controller]}"
  puts "action:#{recognized_route_info[:action]}"

  recognized_route_info.each do |key, value|
    if ![:controller, :action].include?(key.to_sym) # Ensure key is symbol for comparison
      puts "route_param_#{key}:#{value}"
    end
  end

rescue ActionController::RoutingError => e
  puts "Error: Route not found." # Added space
  puts "  Path: '#{path}'"
  puts "  Method: '#{http_method_str.upcase}'"
  # puts "  Rails Error Details: #{e.message}"
  exit 1
rescue ArgumentError => e
  puts "Error: Invalid argument encountered in Rails runner." # Added space
  puts "  Details: #{e.class}: #{e.message}"
  exit 1
rescue => e
  puts "Error: Rails runner encountered an unexpected failure." # Added space
  puts "  Path: '#{path}'"
  puts "  Method: '#{http_method_str.upcase}'"
  puts "  Details: #{e.class}: #{e.message}"
  # puts "  Backtrace:\n#{e.backtrace.join("\n    ")}"
  exit 1
end
RUBY_SCRIPT
)

# Run Rails runner
if ! OUTPUT=$(RAILS_URL_PATH="$URL_PATH" RAILS_HTTP_METHOD="$HTTP_METHOD" bin/rails runner "$RAILS_RUNNER_SCRIPT"); then
  echo "" 
  echo "--------------------------------------------------"
  echo "Rails runner execution failed OR the script within runner exited with an error."
  if [ -n "$OUTPUT" ]; then
    echo "Runner Output (contains error details from script):"
    echo "$OUTPUT" | sed 's/^/  /'
  else
    echo "No specific output was captured from the runner. This might indicate a problem"
    echo "launching the runner itself. Check your Rails environment and logs if issues persist."
  fi
  echo "--------------------------------------------------"
  exit 1
fi

# Parse controller and action from the successful output
CONTROLLER_NAME=$(echo "$OUTPUT" | grep "^controller:" | sed "s/controller://")
ACTION_NAME=$(echo "$OUTPUT" | grep "^action:" | sed "s/action://")

if [ -z "$CONTROLLER_NAME" ] || [ -z "$ACTION_NAME" ]; then
  echo "Error: Could not parse controller/action from Rails runner output."
  echo "       This might indicate an unexpected success output format from the runner."
  echo "Raw Runner Output:"
  echo "$OUTPUT" | sed 's/^/  /'
  echo "--------------------------------------------------"
  exit 1
fi

echo "Route Recognized Successfully:"
echo "  Controller: $CONTROLLER_NAME"
echo "  Action:     $ACTION_NAME"

# Parse and display route parameters
ROUTE_PARAMS_OUTPUT=$(echo "$OUTPUT" | grep "^route_param_")
if [ -n "$ROUTE_PARAMS_OUTPUT" ]; then
  echo "" # Add a newline before parameters section
  echo "Route Parameters:"
  echo "$ROUTE_PARAMS_OUTPUT" | while IFS= read -r line; do
    # Extract key and value from "route_param_key:value"
    param_name=$(echo "$line" | sed -E 's/^route_param_([^:]+):.*/\1/')
    param_value=$(echo "$line" | sed -E 's/^route_param_[^:]+:(.*)/\1/')
    # Print formatted: 2 spaces indent, param_name left-justified in 20 chars, then value
    printf "  %-20s %s\n" "${param_name}:" "$param_value"
  done
fi
echo "" # Add a newline for separation before file paths

# Construct controller file path
CONTROLLER_FILE="app/controllers/${CONTROLLER_NAME}_controller.rb"
echo "Controller File:"
echo -n "  $CONTROLLER_FILE"
if [ -f "$CONTROLLER_FILE" ]; then
    echo " (File exists)"
else
    echo " (File NOT found)"
fi
echo ""

# Construct conventional view file paths
echo "View Files (checking common conventions):"
VIEW_BASE_PATH="app/views/$CONTROLLER_NAME/$ACTION_NAME"

FOUND_VIEW_FILES=()
CHECKED_VIEW_PATHS=()

for ext in "${VIEW_EXTENSIONS[@]}"; do
  VIEW_FILE="${VIEW_BASE_PATH}${ext}"
  CHECKED_VIEW_PATHS+=("$VIEW_FILE")
  if [ -f "$VIEW_FILE" ]; then
    FOUND_VIEW_FILES+=("  $VIEW_FILE (File exists)")
  fi
done

if [ ${#FOUND_VIEW_FILES[@]} -gt 0 ]; then
  for found_file in "${FOUND_VIEW_FILES[@]}"; do
    echo "$found_file"
  done
else
  echo "  No conventional view files found in 'app/views/$CONTROLLER_NAME/' for action '$ACTION_NAME'."
  echo "  Checked paths (using common extensions):"
  for checked_path in "${CHECKED_VIEW_PATHS[@]}"; do
      echo "    - $checked_path"
  done
fi

exit 0
