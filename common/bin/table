#!/usr/bin/env ruby

def print_usage_and_exit
  abort 'Please provide table names to print as arguments'
end

def print_table schema, table_name
  in_table_body = false

  body_lines = []

  schema.split("\n").each do |line|
    if in_table_body &&
        (line =~ /^\s+end\s*$/ || # schema
         line =~ /^\);$/)         # structure
      in_table_body = false

      # print out the table, sorted by column name, and then print the end
      body_lines.sort do |a, b|
        if a.split('"').count > 1 && b.split('"').count
          # config/schema.rb files are like:
          # t.string "zip_code", limit: 255
          # so we need to find the quoted part
          a.split('"')[1] <=> b.split('"')[1]
        else
          # config/structure.sql files are like:
          # zip_code character varying(255),
          # so we can just compare the lines alphabetically
          a <=> b
        end
      end.each { |l| puts l }
      body_lines = []

      puts line
    end

    if in_table_body
      body_lines << line
    end

    if line =~ /^\s+create_table "#{table_name}"/ || # schema
       line =~ /^CREATE TABLE #{table_name} /        # structure
      puts line
      in_table_body = true
    end

    if line =~ /^\s+add_index "#{table_name}"/ ||
       line =~ /^CREATE.* INDEX index_#{table_name}/
      puts line
    end
  end
end


table_names = ARGV
print_usage_and_exit if table_names.empty?

schema_filename = './db/schema.rb'
structure_filename = './db/structure.sql'
unless File.exist?(schema_filename) || File.exist?(structure_filename)
  abort "Error: neither #{schema_filename} nor #{structure_filename} exists."
end

schema = File.read(structure_filename) rescue nil
schema ||= File.read(schema_filename) rescue nil

table_names.each do |table_name|
  print_table schema, table_name
end
