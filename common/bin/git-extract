#!/usr/bin/env ruby

require 'optparse'
require 'time'

# WARNING: this script is experimental. It's possible to get in a bad state if
# something is unexpected.
#
# This script takes the current branch and "extracts" some commits from the
# branch you are currently on. Let's call the branch you are on "A". It will
# remove the commits from that branch. Then it creates a new branch (branch B)
# that has those commits.
#
# This can be useful for extracting a few commits for a separate pull request
# when you those commits could stand apart from the current branch. For
# example, if you fix a small bug and want to just make a quick PR for it. Or
# there are a few refactoring-related commits that are incidental to the
# changes you really want to make.
#
# The commits to extract should be provided in order from newest to oldest.
# They do not need to be sequential.

main_branch=`git branch --list main master | sed -r 's/^[* ] //' | head -n 1`
feature_branch=`git rev-parse --abbrev-ref HEAD`

options = {
  new_branch_name: nil,
}

# Show help if no arguments provided
# https://stackoverflow.com/a/20604834/532524
ARGV << '-h' if ARGV.empty?

op = OptionParser.new

op.banner = <<~EOS
  Usage:
    git-extract [-b branch_name] <last_commit> [<other_commits>...]
    git-extract [-b branch_name] <first_commit>^...<last_commit> [<other_commits>...]
EOS

op.on(
  '--new-branch-name branch_name',
  '-b',
  'Branch name for extracted commits (required if > 1 commit)'
) do |value|
  options[:new_branch_name] = value
end

op.on('-v', '--verbose') do
  options[:verbose] = true
end

op.parse!(ARGV)

puts "Performing task with options: #{options.inspect}" if options[:verbose]

revisions = ARGV

def print_error(msg)
  puts "\033[0;31m#{msg}\033[0m"
end

def exit_with_error(msg)
  print_error(msg)
  exit 1
end

# see https://stackoverflow.com/questions/3878624
unless `git status -s`.empty?
  exit_with_error "There are uncommitted changes."
end

unless revisions.any?
  exit_with_error "No revisions found"
end

revisions = revisions.map do |revision|
  if revision == 'HEAD'
    `git rev-parse HEAD`.chomp # HEAD will change as we are changing branches, etc., so make it absolute
  elsif revision =~ /\.\./
    `git log --oneline #{revision} | cut -d ' ' -f 1`.split("\n")
  else
    revision
  end
end.flatten

new_branch_name = options[:new_branch_name]

if revisions.one? && !new_branch_name
  new_branch_name = `
    git log \
      --pretty=oneline \
      --abbrev-commit \
      #{revisions.first} | \
      head -1 | \
      cut -d ' ' -f 2- | \
      tr '[:upper:]' '[:lower:]' | \
      sed 's/[/ _]/-/g' | \
      sed 's/[^a-z0-9-]//g'
  `.chomp
end

unless new_branch_name
  exit_with_error 'Please specify a new branch name when using multiple commits'
end

unless `git branch --list #{new_branch_name}`.empty?
  exit_with_error "Destination branch already exists: #{new_branch_name}"
end

puts "Extract to branch: #{new_branch_name}"

revisions.each do |revision|
  result=`git show --no-patch --oneline #{revision}`
  if $? == 0
    puts "  #{result}"
  else
    exit_with_error "Could not find commit: #{revision}"
  end
end

print "\nExtract? [y/N] "
confirm = $stdin.gets.chomp
exit unless confirm.downcase == 'y'

# Add a line to the reflog make reversion easy in case something gets messed up
# https://stackoverflow.com/questions/36770141/can-i-add-a-line-to-the-reflog
`git update-ref -m "git-extract: before extraction (#{DateTime.now.strftime("%F %T")})" HEAD HEAD`

puts "\nRemoving commits from #{feature_branch}"
revisions.each do |revision|
  output = `git rebase --quiet --onto #{revision}^ #{revision} #{feature_branch} &> /dev/null`
  if $? == 0
    puts "  Removed #{revision}"
  else
    print_error "Had trouble removing commit #{revision}"
    `git rebase --abort`
    exit 1
  end
end

puts ''
`git checkout -b #{new_branch_name}`
`git reset --hard origin/#{main_branch}`

puts "  Cherry-picking commits..."
revisions.reverse.each do |revision|
  output = `git cherry-pick #{revision}`
  if $? == 0
    if options[:verbose]
      puts output
    else
      puts "    Cherry-picked #{revision}"
    end
  else
    print_error "Had trouble cherry-picking commit #{revision}"
    `git cherry-pick --abort`
    exit 1
  end
end

puts ''
puts "Previous branch:                        #{feature_branch}"
puts "Current branch with extracted commits:  #{new_branch_name}"
