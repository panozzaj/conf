#!/bin/bash

set -e

# Script to rebase dependabot PRs that have merge conflicts
# Usage: dependabot_rebase [--dry-run] [--execute]

show_usage() {
    cat << EOF
Usage: dependabot_rebase [OPTIONS]

Finds open dependabot PRs with merge conflicts in the current repository
and triggers a rebase by commenting "@dependabot rebase" on them.

OPTIONS:
    --dry-run     Show what would be done without actually commenting (default)
    --execute     Actually post the rebase comments to GitHub
    --help        Show this help message

EXAMPLES:
    dependabot_rebase                    # Dry run (default)
    dependabot_rebase --dry-run          # Explicit dry run
    dependabot_rebase --execute          # Actually post comments

REQUIREMENTS:
    - Must be run from within a git repository
    - GitHub CLI (gh) must be installed and authenticated
    - Repository must have dependabot PRs with merge conflicts

EOF
}

# Default to dry run
DRY_RUN=true

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --execute)
            DRY_RUN=false
            shift
            ;;
        --help|-h)
            show_usage
            exit 0
            ;;
        *)
            echo "Error: Unknown option $1"
            show_usage
            exit 1
            ;;
    esac
done

# Check if gh CLI is installed
if ! command -v gh &> /dev/null; then
    echo "Error: GitHub CLI (gh) is not installed or not in PATH"
    echo "Please install it from: https://cli.github.com/"
    exit 1
fi

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "Error: Not in a git repository"
    echo "Please run this script from within a git repository"
    exit 1
fi

# Check if we can authenticate with GitHub
if ! gh auth status &> /dev/null; then
    echo "Error: Not authenticated with GitHub CLI"
    echo "Please run: gh auth login"
    exit 1
fi

echo "üîç Searching for open dependabot PRs with merge conflicts..."
echo "============================================================="
echo

# Get the current repository (owner/repo format)
REPO=$(gh repo view --json owner,name --jq '.owner.login + "/" + .name')
echo "Repository: $REPO"
echo

# Find all open dependabot PRs
echo "üìã Finding open dependabot PRs..."
ALL_DEPENDABOT_PRS=$(gh search prs \
    --repo "$REPO" \
    --state open \
    --author "app/dependabot" \
    --limit 200 \
    --json "number,title,url")

if [ -z "$ALL_DEPENDABOT_PRS" ] || [ "$ALL_DEPENDABOT_PRS" = "[]" ]; then
    echo "‚úÖ No open dependabot PRs found!"
    exit 0
fi

echo "üîç Checking merge status for each PR..."

# Create temp file for conflicted PRs
TEMP_FILE=$(mktemp)

# Parse each PR and check for conflicts
echo "$ALL_DEPENDABOT_PRS" | jq -r '.[] | "\(.number)|\(.title)|\(.url)"' | while IFS='|' read -r pr_number pr_title pr_url; do
    echo "  Checking PR #$pr_number: $pr_title"
    MERGEABLE_STATE=$(gh pr view "$pr_number" --json mergeable --jq '.mergeable')

    if [ "$MERGEABLE_STATE" = "CONFLICTING" ]; then
        echo "    ‚ö†Ô∏è  Has merge conflicts"
        echo "$pr_number|$pr_title|$pr_url" >> "$TEMP_FILE"
    else
        echo "    ‚úÖ No conflicts"
    fi
done

# Read the conflicted PRs from the temp file
PR_NUMBERS=()
PR_TITLES=()
PR_URLS=()

if [ -s "$TEMP_FILE" ]; then
    while IFS='|' read -r pr_number pr_title pr_url; do
        PR_NUMBERS+=("$pr_number")
        PR_TITLES+=("$pr_title")
        PR_URLS+=("$pr_url")
    done < "$TEMP_FILE"
fi

rm -f "$TEMP_FILE"

if [ ${#PR_NUMBERS[@]} -eq 0 ]; then
    echo "‚úÖ No dependabot PRs with merge conflicts found!"
    exit 0
fi

echo "‚ö†Ô∏è  Found ${#PR_NUMBERS[@]} dependabot PR(s) with merge conflicts:"
echo

for i in "${!PR_NUMBERS[@]}"; do
    echo "  PR #${PR_NUMBERS[$i]}: ${PR_TITLES[$i]}"
    echo "    URL: ${PR_URLS[$i]}"
    echo
done

if [ "$DRY_RUN" = true ]; then
    echo "üî• DRY RUN MODE - Would post '@dependabot rebase' comments to:"
    echo
    for i in "${!PR_NUMBERS[@]}"; do
        echo "  ‚Üí PR #${PR_NUMBERS[$i]}: ${PR_TITLES[$i]}"
    done
    echo
    echo "üí° To actually post the comments, run: dependabot_rebase --execute"
else
    echo "üöÄ EXECUTE MODE - Posting '@dependabot rebase' comments..."
    echo

    SUCCESSFUL=0
    FAILED=0

    for i in "${!PR_NUMBERS[@]}"; do
        echo "  ‚Üí Commenting on PR #${PR_NUMBERS[$i]}..."

        if gh pr comment "${PR_NUMBERS[$i]}" --body "@dependabot rebase" 2>/dev/null; then
            echo "    ‚úÖ Success"
            ((SUCCESSFUL++))
        else
            echo "    ‚ùå Failed"
            ((FAILED++))
        fi
    done

    echo
    echo "üìä Results:"
    echo "  ‚úÖ Successful: $SUCCESSFUL"
    echo "  ‚ùå Failed: $FAILED"

    if [ $FAILED -gt 0 ]; then
        echo
        echo "‚ö†Ô∏è  Some comments failed to post. This might be due to:"
        echo "  - Network issues"
        echo "  - Insufficient permissions"
        echo "  - PR already being processed"
    fi
fi

echo
echo "‚ú® Done!"
