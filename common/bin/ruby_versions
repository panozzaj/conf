#!/usr/bin/env ruby

require 'net/http'
require 'nokogiri'
require 'date'
require 'optparse'
require 'set'
require 'json'
require 'tmpdir'

class RubyVersionReporter
  RELEASES_URL = "https://www.ruby-lang.org/en/downloads/releases/"
  EOL_API_URL = "https://endoflife.date/api/ruby.json"
  DEBUG = ENV['DEBUG'] == 'true'

  # --- Color Definitions ---
  class ::String
    def green;  "\e[32m#{self}\e[0m" end
    def yellow; "\e[1;33m#{self}\e[0m" end
    def cyan;   "\e[36m#{self}\e[0m" end
    def grey;   "\e[90m#{self}\e[0m" end
    def red;    "\e[31m#{self}\e[0m" end
    def b_white; "\e[1;37m#{self}\e[0m" end
  end

  def initialize(options, current_version_string: RUBY_VERSION, io: $stdout)
    @options = options
    @io = io
    @current_version = Gem::Version.new(current_version_string)
    @current_major_minor = Gem::Version.new(@current_version.segments[0..1].join('.'))
  end

  def run
    @io.puts "Checking your local Ruby version... #{@current_version.to_s.cyan}"

    # Fetch both data sources in parallel
    eol_data, releases = fetch_all_data

    unless eol_data
      @io.puts "Warning: Could not fetch End-of-Life data. Proceeding without it.".yellow
      eol_data = []
    end

    return unless releases

    releases = filter_prereleases(releases)

    if releases.empty?
      @io.puts "\nCould not find any release information on the page."
      return
    end

    eol_map = Hash[eol_data.map { |cycle| [cycle['cycle'], cycle['eol']] }]

    report(releases, eol_map)
  end

  private

  def fetch_all_data
    eol_thread = Thread.new { fetch_json(EOL_API_URL, "EOL data") }
    releases_thread = Thread.new { fetch_releases_html }

    [eol_thread.value, releases_thread.value]
  end

  def fetch_json(url, data_name)
    @io.puts "Fetching #{data_name} from #{url} ..."
    uri = URI(url)
    response = Net::HTTP.get_response(uri)

    unless response.is_a?(Net::HTTPSuccess)
      @io.puts "\nFailed to fetch #{data_name}. HTTP Status: #{response.code}".red
      return nil
    end

    JSON.parse(response.body)
  rescue JSON::ParserError
    @io.puts "\nFailed to parse #{data_name} JSON response.".red
    nil
  end

  def fetch_releases_html
    @io.puts "Fetching release data from #{RELEASES_URL} ..."
    uri = URI(RELEASES_URL)
    response = Net::HTTP.get_response(uri)

    unless response.is_a?(Net::HTTPSuccess)
      @io.puts "\nFailed to fetch release data. HTTP Status: #{response.code}".red
      return nil
    end

    if DEBUG
      debug_file = File.join(Dir.tmpdir, "ruby_versions_debug.html")
      File.write(debug_file, response.body)
      @io.puts "DEBUG: Wrote page content to #{debug_file}"
    end
    parse_releases(response.body)
  end

  def parse_releases(html_body)
    releases = []
    doc = Nokogiri::HTML(html_body)
    doc.css('table.release-list tr').each do |row|
      cells = row.css('td')
      next if cells.empty?

      version_text = cells[0]&.text&.strip
      date_text = cells[1]&.text&.strip

      if version_text&.start_with?('Ruby ') && date_text
        iso_date = begin
                     Date.parse(date_text).iso8601
                   rescue Date::Error
                     date_text
                   end
        version_num = version_text.sub('Ruby ', '')
        releases << { version: Gem::Version.new(version_num), date: iso_date }
      end
    end
    releases
  end

  def filter_prereleases(releases)
    base_versions = releases.group_by { |r| r[:version].segments[0..2].join('.') }
    base_versions.flat_map do |_, release_group|
      has_final_release = release_group.any? { |r| !r[:version].prerelease? }
      if has_final_release
        release_group.reject { |r| r[:version].prerelease? }
      else
        release_group
      end
    end
  end

  def report(releases, eol_map)
    grouped_releases = releases.group_by { |r| r[:version].segments[0..1].join('.') }
    sorted_groups = grouped_releases.keys.sort_by { |v| Gem::Version.new(v) }.reverse

    visible_groups = sorted_groups
    unless @options[:show_all_time]
      visible_groups = sorted_groups.select { |group_key| Gem::Version.new(group_key) >= @current_major_minor }
    end

    @io.puts ""
    visible_groups.each do |group_key|
      eol_date = eol_map[group_key]
      eol_info = format_eol_info(eol_date)

      header = "--- Ruby #{group_key} Releases ---"
      @io.puts "#{header.b_white}#{eol_info}"
      display_group(grouped_releases[group_key], eol_date: eol_date)
      @io.puts ""
    end
  end

  def get_eol_status(eol_date)
    return nil unless eol_date
    begin
      eol = Date.parse(eol_date.to_s)
      today = Date.today
      six_months_from_now = today >> 6

      if eol < today
        :red
      elsif eol < six_months_from_now
        :yellow
      else
        :green
      end
    rescue Date::Error
      nil
    end
  end

  def format_eol_info(eol_date)
    return "" unless eol_date

    begin
      eol_str = " (EOL: #{Date.parse(eol_date.to_s).iso8601})"
      status = get_eol_status(eol_date)

      case status
      when :red
        eol_str.red
      when :yellow
        eol_str.yellow
      when :green
        eol_str.green
      else
        " (EOL: #{eol_date})".grey
      end
    rescue Date::Error
      " (EOL: #{eol_date})".grey
    end
  end

  def display_group(group_releases, eol_date:)
    sorted_versions = group_releases.sort_by { |r| r[:version] }.reverse
    versions_to_display = build_display_list(sorted_versions)

    versions_to_display.each_with_index do |item, list_index|
      if item == :ellipsis
        previous_release = versions_to_display[list_index - 1]
        is_grey = is_older?(previous_release[:version])
        @io.puts(is_grey ? "  ...".grey : "  ...")
      else
        print_release_line(item, is_latest_in_group: item == sorted_versions.first, eol_date: eol_date)
      end
    end
  end

  def build_display_list(sorted_versions)
    truncate_output = sorted_versions.count > 10 && !@options[:show_all_in_series]
    return sorted_versions unless truncate_output

    indices_to_show = Set.new
    (0..4).each { |i| indices_to_show.add(i) } # Top 5
    (sorted_versions.length - 5..sorted_versions.length - 1).each { |i| indices_to_show.add(i) } # Bottom 5

    current_version_index = sorted_versions.find_index { |r| r[:version] == @current_version }
    indices_to_show.add(current_version_index) if current_version_index

    display_list = []
    last_shown_index = -1
    indices_to_show.to_a.sort.each do |index|
      if last_shown_index != -1 && index > last_shown_index + 1
        display_list.push(:ellipsis)
      end
      display_list.push(sorted_versions[index])
      last_shown_index = index
    end
    display_list
  end

  def is_older?(release_version)
    release_major_minor = Gem::Version.new(release_version.segments[0..1].join('.'))
    (release_major_minor < @current_major_minor) ||
    (release_major_minor == @current_major_minor && release_version < @current_version)
  end

  def print_release_line(release, is_latest_in_group:, eol_date:)
    version_str = release[:version].to_s
    output_line = "  %-18s (Released: %s)" % [version_str, release[:date]]

    is_current = release[:version] == @current_version
    is_old = is_older?(release[:version])
    eol_status = get_eol_status(eol_date)

    if is_current
      # "you are here" line is colored by EOL status, and this takes precedence over "Latest"
      full_line = "#{output_line}  <-- You are here"
      line_color = eol_status || :green

      output = case line_color
               when :green then full_line.green
               when :yellow then full_line.yellow
               when :red then full_line.red
               else full_line
               end
      @io.puts output
    elsif is_latest_in_group
      # Latest lines are white (or grey), but the tag is colored by EOL status.
      tag_string = "  <-- Latest"
      colored_tag = case eol_status
                    when :green then tag_string.green
                    when :yellow then tag_string.yellow
                    when :red then tag_string.red
                    else tag_string
                    end

      line_text = is_old ? output_line.grey : output_line
      @io.puts "#{line_text}#{colored_tag}"
    elsif is_old
      # An old, non-latest line is all grey.
      @io.puts output_line.grey
    else
      # A normal line is all white.
      @io.puts output_line
    end
  end
end

# --- Options Parsing ---
if $0 == __FILE__
  options = {
    show_all_in_series: false,
    show_all_time: false
  }
  OptionParser.new do |opts|
    opts.banner = "Usage: ruby_versions [options]"
    opts.on("-a", "--all-series", "Show all versions in the current series (no truncation)") do
      options[:show_all_in_series] = true
    end
    opts.on("-A", "--all-time", "Show all historical Ruby series, not just from your current version forward") do
      options[:show_all_time] = true
    end
    opts.on("-h", "--help", "Prints this help") do
      puts opts
      exit
    end
  end.parse!

  begin
    reporter = RubyVersionReporter.new(options)
    reporter.run
  rescue Interrupt
    # Gracefully exit on Ctrl-C
    puts "\nInterrupted. Exiting."
    exit 130
  rescue => e
    puts "\nAn unexpected error occurred:".red
    puts e.message
    puts e.backtrace.join("\n").grey if DEBUG
    exit 1
  end
end
